{"version":3,"sources":["pages/Home/Home.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","todayPanchang","fetch","then","response","json","jsonData","newDate","Date","date","getDate","month","getMonth","todayResult","filter","tithi","toString","setState","catch","error","console","NAADI","bigSetShukl","Set","bigSetKrishn","smallSet","startPoint","this","paksh","has","hourPart","minutePart","sunriseTime","sunrise","products","undefined","parseInt","substr","alternateStartPoint","startModuleId","i","naadiResult","push","startTime","endTime","naadi","Fragment","className","style","paddingTop","maxWidth","borderRadius","textAlign","color","border","padding","keyField","data","columns","dataField","text","Component","Header","to","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ebf9b4ee.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\n// import FilterBar from \"../../containers/FilterBar/FilterBar\";\r\n// import ProductList from \"../../containers/ProductList/ProductList\";\r\n// import Pagination from \"../../components/Pagination/Pagination\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { todayPanchang: \"\" }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://api.jsonbin.io/b/5e9ff6855fa47104cea4ece1/4')\r\n            .then(response => response.json())\r\n            .then((jsonData) => {\r\n                // jsonData is parsed json object received from url\r\n                let newDate = new Date();\r\n                let date = newDate.getDate();\r\n                let month = newDate.getMonth();\r\n                let todayResult = jsonData.filter(((tithi) => tithi.date === date.toString() && tithi.month === (month + 1).toString()));\r\n                this.setState({ todayPanchang: todayResult[0] });\r\n            })\r\n            .catch((error) => {\r\n                // handle your errors here\r\n                console.error(error)\r\n            })\r\n\r\n\r\n\r\n\r\n    }\r\n    render() {\r\n        const NAADI = {\r\n            L: 'Ida/Left',\r\n            R: 'Pingla/Right'\r\n          };\r\n\r\n        let bigSetShukl = new Set([\"pritipada\", \"dwitiya\", \"tritiya\", \"saptmi\", \"ashtmi\", \"navmi\", \"triyodashi\", \"chaturdashi\", \"poornima\"]);\r\n        let bigSetKrishn = new Set([\"pritipada\", \"dwitiya\", \"tritiya\", \"saptmi\", \"ashtmi\", \"navmi\", \"triyodashi\", \"chaturdashi\", \"amavasya\"]);\r\n        let smallSet = new Set([\"chaturthi\", \"panchmi\", \"shashti\", \"dashmi\", \"ekadashi\", \"dwadashi\"]);\r\n\r\n        var startPoint = \"\";\r\n        if ((this.state.todayPanchang.paksh === \"shukl\" && bigSetShukl.has(this.state.todayPanchang.tithi)) || (this.state.todayPanchang.paksh === \"krishn\" && smallSet.has(this.state.todayPanchang.tithi))) {\r\n            startPoint = NAADI.L\r\n        }\r\n        if ((this.state.todayPanchang.paksh === \"krishn\" && bigSetKrishn.has(this.state.todayPanchang.tithi)) || (this.state.todayPanchang.paksh === \"shukl\" && smallSet.has(this.state.todayPanchang.tithi))) {\r\n            startPoint = NAADI.R\r\n        }\r\n        let sunriseTime = this.state.todayPanchang.sunrise;\r\n        let date = this.state.todayPanchang.date;\r\n        let month = this.state.todayPanchang.month;\r\n        let tithi = this.state.todayPanchang.tithi;\r\n        let paksh = this.state.todayPanchang.paksh;\r\n\r\n        const columns = [{\r\n            dataField: 'startTime',\r\n            text: 'Start Time (24 HRS)'\r\n        }, {\r\n            dataField: 'endTime',\r\n            text: 'End Time (24 HRS)'\r\n        }, {\r\n            dataField: 'naadi',\r\n            text: 'Naadi / Swar'\r\n        }];\r\n\r\n        let products = [];\r\n        let hourPart = \"\";\r\n        let minutePart= \"\";\r\n        {hourPart =sunriseTime === undefined ? \"6\":parseInt(sunriseTime.substr(0,2)) };\r\n        {minutePart =sunriseTime === undefined ? \"0\":parseInt(sunriseTime.substr(2,4)) };\r\n        let startModuleId = (hourPart % 2);\r\n        let alternateStartPoint =\"\"; \r\n        {alternateStartPoint = NAADI.L !== startPoint ? NAADI.L : NAADI.R }\r\n        for (let i = hourPart; i < 23; i++) {\r\n        let naadiResult = \"\";\r\n        {naadiResult = (i%2)=== startModuleId ? startPoint : alternateStartPoint}    \r\n        products.push({\r\n            startTime: i + \":\"+minutePart,\r\n            endTime: (i+1) + \":\"+minutePart,\r\n            naadi: naadiResult\r\n        });\r\n        }\r\n        \r\n        //const CaptionElement = () => ;\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container \" style={{paddingTop: '6rem'}} >\r\n                <div className=\"row  justify-content-center \">\r\n                    <div className=\"card  bg-light shadow p-3 mb-5 rounded\" style={{maxWidth:\"50rem\"}} >\r\n                        \r\n                            <div className=\"card-body\">\r\n                                <u><h5 className=\"card-title\">SWAR VIGYAN</h5></u>\r\n                                <p className=\"card-text\">In short, Human body have 3 main Naadis/Swar i.e. Ida (Chandra/Left Nostril) , Pingla (Surya/ Right Nostril)\r\n                                and Sushumna. Sushumna is invisible. But as per the nautral law, at the time of sunrise and on the basis of Hindu Panchang (tithi and Paksha),\r\n                                everyday one of the nostril starts at Sun rise time and after every one Hour it used to change to the different Nostril. Let's say, day starts with Ida/Left Nostril and after every \r\n                                alernate hour, it used to change to Pingla/Right Nostril. Accurate functioning of Ida and Pingla Naadis are very important\r\n                                for a healthy life.\r\n                                <br/>\r\n                                <br/>\r\n                                <b>This app will help you to track the hourly appropriate sequence of Swar/Naadi that should run. See the table below for the same.</b>\r\n                                </p>\r\n                            </div>\r\n                            <h3 style={{ borderRadius: '0.25em', textAlign: 'center', color: 'purple', border: '1px solid purple', padding: '0.5em' }}>Date : {date}-{month} / Tithi : {tithi} / Paksh : {paksh}  / Sunrise Time : {sunriseTime} (24 Hrs)</h3>\r\n                            <BootstrapTable keyField=\"startTime\" data={ products }  columns={ columns } />\r\n                        </div>\r\n                        \r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n};\r\n\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\r\n            <div className=\"container\">\r\n                <NavLink className=\"navbar-brand\" to=\"/\">Swar Vigyan</NavLink>\r\n                {/* <div>\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to={\"/cart\"}><i className=\"fa fa-shopping-cart mr-2\"\r\n                                                                          aria-hidden=\"true\" />Cart {cartLength ? `(${cartLength})`: ''}</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div> */}\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\n\r\n/*\r\n*                         <li className=\"nav-item active\">\r\n                            <a className=\"nav-link\" href=\"#\">Home\r\n                                <span className=\"sr-only\">(current)</span>\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">About</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">Services</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">Contact</a>\r\n                        </li>\r\n* */\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"py-5 bg-dark page-footer pt-4 mt-4 font-small\">\r\n            <div className=\"container\">\r\n                <p className=\"m-0 text-center text-white\">Copyright © Swar Vigyan Tyban Technologies 2020</p>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\n\r\n\r\n\r\nimport {HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n\r\nimport Home from \"./pages/Home/Home\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Footer from \"./components/Footer/Footer\";\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        \r\n            <HashRouter>\r\n            <React.Fragment>\r\n                <Header/>\r\n                <Home/>\r\n                <Switch>\r\n                    {/* <Route exact path={'/'} render={() => {\r\n                        return <Redirect to={'/home'}/>\r\n                    }}/>\r\n                    <Route exact path={'/home'} component={Home}/> */}\r\n                    {/* <Route exact path={'/products/:id'} component={ProductDetail}/>\r\n                    <Route exact patr={'/cart'} component={ShoppingCart}/> */}\r\n                </Switch>\r\n                <Footer/>\r\n            </React.Fragment>\r\n            </HashRouter>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}